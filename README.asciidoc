Whoops
======
Daniel Higginbotham <daniel@flyingmachinestudios.com>
2011-07-09

== Overview

=== Purpose

whoops was originally conceived as an alternative to Hoptoad. Its allows you to:

* *Log arbitrary events.* Whoops events use an event_type field which can be any string - exception, notification, warning, etc.
* *Log arbitrary details.* Events are stored in http://www.mongodb.org[mongodb], giving you the flexibility of a document database.
* *Search event details.* The search parser maps text to mongoid conditions, allowing you to do queries like +details.current_user_id#in [123, 423]+
* *Extend the app.* Since it's a rails engine, you can make changes to your base rails app without worrying about merge difficulties when you upgrade whoops.

If you find yourself bumping up against limitations in Hoptoad, whoops might be right for you.

=== Design

whoops consists of two main components: the rails 3 engine and the notifier. Hosting is up to you. The engine provides the following:

* Controllers and views for viewing, filtering, and searching events.
* An end point for receiving event notifications
* A mailer for sending email notifications
* http://www.mongoid.org[Mongoid] models

The notifier is documented separately. Briefly, it allows you to create strategies for building an event notification. It also allows you to modify existing strategies.

For example, you could use the https://github.com/flyingmachine/whoops_rails_notifier[rails 3 notifier] , but modify it to include the ID of the currently logged in user. If your app ran background processes, you could create a notification strategy specific to your processes. Both strategies can coexist in the same app.

=== Terms / Models

* _Event_ A specific occurrence of an event. The Event model stores details specific to an event.
* _Event Group_ All Events are associated with an Event Group. Event Groups store details common to all events in the group.
* _Notification_ The whoops notifier sends Notifications to whoops. A notification contains both Event and Event Group information; whoops sorts it out when it receives a Notification.

== Usage

=== Installation

. create a new rails app
. add +gem "whoops"+ to your Gemfile
. run +bundle+
. run +bundle exec rails g whoops:assets+ - this copies assets to your public directory (whoops isn't 3.1 compatible yet)
. _optional_ add `root :to => "event_groups#index"` to your routes file to make the event group listing your home page
. add https://github.com/flyingmachine/whoops_notifier[notifiers] to the code you want to monitor

=== Filtering

.Filters
image::https://github.com/flyingmachine/whoops/raw/master/doc/images/dash-filters.png[Filters]

When viewing the Event Group list, you can filter by service, environment, and event type.

When you set a filter, its value is stored in a session and won't be changed until you click "reset". This is so that you won't lose your filter after, for example, viewing a specific event.

=== Searching

.Search
image::https://github.com/flyingmachine/whoops/raw/master/doc/images/details-search.png[Search]

For now, you need to enter your queries into the textarea shown above. Currently, searches only apply to the events within the current event group.

.Search Syntax
----
key[#method] query
----

* _key_ the Event field to search.
* _method (optional)_ a [http://mongoid.org/docs/querying/criteria.html#where]Mongoid where criteria method
* _query_ a YAML string

.Examples

Below is the text you would write, and below that is essentially the ruby code that ends up getting run by the server

----
details.current_user_id#in [3, 54, 532]      <1>
details.num_failures#gt 3                    <2>
details.current_user.first_name Voldemort    <3>
message#in !r/(yesterday|today)/             <4>
----

<1> `Event.where( {:"details.current_user_id".in => [3, 54, 532]} )`
<2> `Event.where( {:"details.num_failure".gt => 3} )`
<3> `Event.where( {:"details.current_user.first_name" => "Voldemort"} )`
<4> `Event.where( {:message.in /(yesterday|today/)} )` Note that regular expressions must start with !r.

This syntax is kind of goofy, but it lets you enter constant numbers, strings, arrays, hashes, and regular expressions, just like you could if you were typing in the code directly.

== TODO

* finish notifications
* site-wide search
* graphing

== License

This project uses MIT-LICENSE.