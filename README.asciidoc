Whoops
======
Daniel Higginbotham <daniel@flyingmachinestudios.com>
2011-07-09

== What is Whoops?

Whoops is a logging system. It consists of a Rails engine (which records logs and provides an interface to them) and a logger. Both are described below, along with how they compare to Hoptoad. Note that the comparisons aren't meant to disparage Hoptoad - it's a great product. They're only meant to help describe Whoops and help people decide whether it would be useful to them.

== Whoops Server

The Whoops server is a Rails engine which records logs and provides an interface to filter, search, and view them. Below is a listing of its features and how it compares to Hoptoad:

=== Log Arbitrary Events

With Hoptoad, you only log exceptions. With Whoops, it's up to you to tell the Whoops server what you're logging, be it an exception, notification, warning, or whatever. Internally, Whoops EventGroups use the event_type field to store the event type. You can filter on this field when viewing a listing of all events.

image::https://github.com/flyingmachine/whoops/raw/master/doc/images/dash-filters.png[Filters]

=== Log Arbitrary Details

With Hoptoad, the fields which you can log are pre-defined. They also reflect an assumption that your error happened within the context of handling an HTTP request. Whoops uses mongodb as its database and this allows you to log whatever details you want. For example, you could log the following:

----
{
  :start_time => 1310748754,
  :end_time   => 1310949834,
  :users_imported => [
    { :id => 413, :succeeded => false },
    { :id => 835, :succeeded => true },
    { :id => 894, :succeeded => true },
    { :id => 124, :succeeded => true },
  ],
}
----

This gets stored as-is in Whoops. You can also search these details, as explained below:

=== Search Event Details

As far I know, you can't search Hoptoad. Whoops let's you search all Events within an EventGroup. Eventually, keyword search over all events will be implemented.

Below is example text you would write, and below that is essentially the ruby code that ends up getting run by the server.

----
details.current_user_id#in [3, 54, 532]      <1>
details.num_failures#gt 3                    <2>
details.current_user.first_name Voldemort    <3>
message#in !r/(yesterday|today)/             <4>
----

<1> `Event.where( {:"details.current_user_id".in => [3, 54, 532]} )`
<2> `Event.where( {:"details.num_failure".gt => 3} )`
<3> `Event.where( {:"details.current_user.first_name" => "Voldemort"} )`
<4> `Event.where( {:message.in /(yesterday|today/)} )` Note that regular expressions must start with !r.
  
The general format is +key[#mongoid_method] query+ . As you can see, +query+ can be a string, number, regex, or array of these values. Hashes are allowed too. If you're not familiar with querying mongo, you can http://www.mongodb.org/display/DOCS/Querying[read more in the mongodb docs]. The http://mongoid.org/docs/querying/criteria.html#where[Mongoid] docs are useful as well.

=== Extend the App

Since Whoops is a Rails engine, you can make changes to your base rails app without worrying about merge difficulties when you upgrade Whoops.

=== Demos

* http://whoops-example.heroku.com[Example of the Whoops Rails engine]
* http://whoops-rails-notifier-example.heroku.com/[Example site which sends logs to whoops]

=== Terms / Models

* _Event_ A specific occurrence of an event. The Event model stores details specific to an event.
* _Event Group_ All Events are associated with an Event Group. Event Groups store details common to all events in the group.
* _Notification_ The whoops notifier sends Notifications to whoops. A notification contains both Event and Event Group information; whoops sorts it out when it receives a Notification.

== Usage

=== Installation

. create a new rails app
. add +gem "whoops"+ to your Gemfile
. run +bundle+
. run +bundle exec rails g whoops:assets+ - this copies assets to your public directory (whoops isn't 3.1 compatible yet)
. _optional_ add `root :to => "event_groups#index"` to your routes file to make the event group listing your home page
. add https://github.com/flyingmachine/whoops_notifier[notifiers] to the code you want to monitor

=== Filtering

.Filters
image::https://github.com/flyingmachine/whoops/raw/master/doc/images/dash-filters.png[Filters]

When viewing the Event Group list, you can filter by service, environment, and event type.

When you set a filter, its value is stored in a session and won't be changed until you click "reset". This is so that you won't lose your filter after, for example, viewing a specific event.

== TODO

* finish notifications
* site-wide search
* graphing

== License

This project uses MIT-LICENSE.